---
title: "eds223_week5_lecture"
author: "Amanda G. Overbye"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---
```{r}
# Load Libraries
library(sf) # vector handling
library(terra) # raster handling
library(tidyverse)
library(tmap) # map making
library(spData) # spatial data
library(spDataLarge) # spatial data
library(viridisLite)
```

```{r}
# load raster dataset
elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))

# load vector dataset
boundary <- read_sf(system.file("vector/zion.gpkg", package = "spDataLarge"))
```

```{r}
# First check to see if the CRS matches 
crs(elevation) == crs(boundary)

# Set up conditional statement for work flow
if(crs(elevation) == crs(boundary)) {
  print("Crs Macth!")
} else{
  warning("Update CRS to match")
  boundary <- st_transform(boundary, st_crs(elevation))
}
# Then you can run in console
```

```{r}
# Make map of raster with matching crs
tm_shape(elevation) +
  tm_raster(title = "Elevation (meters)") +
tm_shape(boundary) + 
  tm_borders(lwd = 2) + # lwd is the length of the line 
  tm_layout(legend.outside = TRUE)
```

```{r}
# Cropping and clipping vector objects
# Crop raster to get rid of any rows or columns
# Crop to the extent of vector object
elevation_cropped <- terra::crop(elevation, boundary)
```

```{r}
# Make map of cropped object
tm_shape(elevation_cropped) +
  tm_raster(title = "Elevation (meters)") +
tm_shape(boundary) + 
  tm_borders(lwd = 2) + # lwd is the length of the line 
  tm_layout(legend.outside = TRUE)
```

```{r}
# Mask our raster based on the vector object
# convert the cells outside of the park into NA

elevation_masked <- terra::mask(elevation_cropped, boundary)
```

```{r}
# Make map of cropped object
tm_shape(elevation_masked) +
  tm_raster(title = "Elevation (meters)") +
tm_shape(boundary) + 
  tm_borders(lwd = 2) + # lwd is the length of the line 
  tm_layout(legend.outside = TRUE)
```

```{r}
# Mask raster based on vector object
# Convert cells outside of the park to NA

elevation_inverse_mask <- terra::mask(elevation_cropped, boundary, inverse = TRUE)
```

```{r}
# Make map of raster based on vector object
tm_shape(elevation_inverse_mask) +
  tm_raster(title = "Elevation (meters)") +
tm_shape(boundary) + 
  tm_borders(lwd = 2) + # lwd is the length of the line 
  tm_layout(legend.outside = TRUE)
```

```{r}
# Turn raster data into a vector data
# First create mask to select places in the park with certain elevation
# Mask to cells inside the park
elevation_inside <- mask(elevation_cropped, boundary)

# Create mask based on value of the cells
# Basically creating a copy
elevation_mask <- elevation_inside

```

```{r}
# Create mask to make nas for 2000s elevation
# Basically filter to all cells in elevation below 2000
elevation_mask[elevation_masked < 2000] <- NA

# Turn it into a polygon
elevation_mask_poly <- terra::as.polygons(elevation_mask) %>%
  st_as_sf()
```

```{r}
tm_shape(elevation_mask_poly) +
  tm_polygons(title = "Elevation (meters)") +
  tm_layout(legend.outside = TRUE)
```

```{r}
# Extract values for points inside the park 
data("zion_points", package = "spDataLarge")
```

```{r}
# Make map of zion_points
# Check crs
crs(zion_points) == crs(elevation)

# Transform crs to match 

zion_points <- st_transform(zion_points, crs = st_crs(elevation))

tm_shape(elevation) +
  tm_raster() +
  tm_shape(boundary) +
  tm_borders() +
  tm_shape(zion_points) +
  tm_symbols()

```

```{r}
# Extracting points?

pts_elevation <- terra::extract(elevation, zion_points)

# Combing columns? This may make the elevation have labels? maybe not?
zion_points <- cbind(zion_points, pts_elevation)
```

```{r}
# Create transect across park that we could plot elevation along
zion_transect <- cbind(c(-133.2, -112.9),
                       c(37.45, 37.2)) %>%
  st_linestring() %>%
  st_sfc(crs = crs(elevation)) %>%
  st_sf(geometry = .)
```

```{r}
# Make map with line
tm_shape(elevation) +
  tm_raster() +
  tm_shape(zion_transect) +
  tm_symbols()
```

```{r}
# Turn the line into a bunch of points
# 250 is the max length of each of the segements
zion_transect$id = 1:nrow(zion_transect)
zion_transect <- st_segmentize(zion_transect, dfMaxLength = 250)
zion_transect <- st_cast(zion_transect, "POINT")

zion_transect <- zion_transect %>%
  group_by(id) %>% 
  mutate(dist = st_distance(geometry)[1,])
transect <- terra::extract(elevation, zion_transect)
zion_transect <- cbind(zion_transect, transect)
```

```{r}
ggplot(zion_transect, aes(x = ID, y = elevation)) +
  geom_point()
```

